---
type Props = {
  href?: string;
  children?: any;
  onClick?: (e: PointerEvent) => void;
  variant?: "primary" | "secondary";
};

console.log(Astro.props);

const { href, children, variant = "primary", onClick } = Astro.props;
const id = crypto.randomUUID();
---

{
  href ? (
    <a href={href} id={id} class:list={["btn", variant]}>
      {children}
    </a>
  ) : (
    <button id={id} class:list={["btn", variant]}>
      {children}
    </button>
  )
}

<script define:vars={{ id, onClick }}>
  const target = document.getElementById(id);
  target?.addEventListener("click", onClick);
</script>

<style>
  .btn {
    display: inline-flex;
    height: var(--space-l);
    min-height: var(--space-l);
    cursor: pointer;
    user-select: none;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    border-radius: 0.5rem;
    padding-left: var(--space-s);
    padding-right: var(--space-s);
    gap: var(--space-s);
    font-weight: 600;
    text-decoration-line: none;
    font-family:
      Cantarell,
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      "Open Sans",
      "Helvetica Neue",
      sans-serif;

      transition: scale .1s;

      &:active {
        scale: .97;
      }
  }

  .primary {
    background-color: var(--primary);
    color: var(--background);

    &:hover {
      background-color: color-mix(in srgb, var(--primary) 90%, black 10%);
    }
  }

  .secondary {
    background-color: var(--secondary);
    color: var(--background);

    &:hover {
      background-color: color-mix(in srgb, var(--secondary) 90%, black 10%);
    }
  }
</style>
